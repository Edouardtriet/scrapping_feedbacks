<div class="container py-4">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <div class="text-muted">
      <!-- here we hardcoded, we will in the future just use the review.count -->
      4560 Results for: <strong><%= @search.app_name %></strong>
    </div>
  </div>

  <div class="card mb-4">
    <div class="card-body">
      <div class="container py-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
          <h1>Review Insights</h1>
          <div class="text-muted">
            <!-- Add download link for CSV file -->
            <% if @csv_url %>
              <a href="<%= @csv_url %>" class="btn btn-primary mt-3">Download Reviews as CSV</a>
            <% else %>
              <p class="text-danger">No CSV file available for download.</p>
            <% end %>
          </div>
        </div>

        <div class="card mb-4">
          <div class="card-body">
            <p>Welcome! Ask me anything about the app reviews or click on a suggested question to get started.</p>
          </div>
        </div>

        <div id="chat-messages" class="mb-4" style="max-height: 400px; overflow-y: auto;">
          <!-- Chat messages will appear here -->
        </div>

        <h5>Suggested questions:</h5>
        <div class="suggested-questions mb-4">
          <div class="row" id="questions-container">
            <div class="col-md-6 mb-2">
              <button class="btn btn-outline-secondary w-100 text-start" onclick="showResponse('What do users like most about this app?')">What do users like most about this app?</button>
            </div>
            <div class="col-md-6 mb-2">
              <button class="btn btn-outline-secondary w-100 text-start" onclick="showResponse('What are the most common complaints?')">What are the most common complaints?</button>
            </div>
          </div>
        </div>

        <div class="input-group">
          <input type="text" class="form-control" id="user-input" placeholder="Ask a question about the reviews...">
          <button class="btn btn-primary" onclick="handleUserInput()">Send</button>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Array of all available questions
    const allQuestions = [
      'What do users like most about this app?',
      'What are the most common complaints?',
      'How has sentiment changed in recent versions?',
      'What features are users requesting?',
      'Compare iOS vs Android reviews'
    ];

    // Keep track of which questions are currently displayed
    let currentQuestionIndices = [0, 1];

    // Function to get a random question that isn't currently displayed
    function getNewQuestionIndex() {
      const availableIndices = allQuestions
        .map((_, index) => index)
        .filter(index => !currentQuestionIndices.includes(index));

      if (availableIndices.length === 0) return null;

      const randomIndex = Math.floor(Math.random() * availableIndices.length);
      return availableIndices[randomIndex];
    }

    // Function to update the question buttons
    function updateQuestionButtons(clickedQuestion) {
      const clickedIndex = allQuestions.indexOf(clickedQuestion);
      const buttonIndex = currentQuestionIndices.indexOf(clickedIndex);

      if (buttonIndex !== -1) {
        const newQuestionIndex = getNewQuestionIndex();
        if (newQuestionIndex !== null) {
          currentQuestionIndices[buttonIndex] = newQuestionIndex;

          // Update the button
          const questionsContainer = document.getElementById('questions-container');
          const buttons = questionsContainer.getElementsByTagName('button');
          buttons[buttonIndex].textContent = allQuestions[newQuestionIndex];
          buttons[buttonIndex].onclick = function() {
            showResponse(allQuestions[newQuestionIndex]);
          };
        }
      }
    }

    // This function creates a typing effect for text
    // Parameters:
    // - element: where to show the text
    // - text: what text to type out
    // - speed: how fast to type (in milliseconds, lower = faster)
    function typeMessage(element, text, speed = 50) {
      let index = 0;
      let displayText = '';
      element.innerHTML = '<p></p>';

      function type() {
        if (index < text.length) {
          displayText += text.charAt(index);
          element.querySelector('p').innerHTML = displayText;
          index++;
          setTimeout(type, speed);
        }
      }

      type();
    }

    // This function handles what happens when a question button is clicked
    function showResponse(question) {
      // First update the question buttons
      updateQuestionButtons(question);

      // Get the chat container
      const chatMessages = document.getElementById('chat-messages');

      // Add the user's question to the chat
      chatMessages.innerHTML += `
        <div class="chat-message bg-primary text-white rounded border p-3 mt-2">
          <p>${question}</p>
        </div>
      `;

      // Create a loading message
      const responseDiv = document.createElement('div');
      responseDiv.className = 'chat-message bg-white text-dark rounded border p-3 mt-2';
      responseDiv.innerHTML = '<p>Analyzing reviews...</p>';
      chatMessages.appendChild(responseDiv);

      // Scroll to the bottom of the chat
      chatMessages.scrollTop = chatMessages.scrollHeight;

      // Make API call to your backend
      fetch('/searches/<%= @search.id %>/analyze_with_ai', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
        },
        body: JSON.stringify({ question: question })
      })
      .then(response => response.json())
      .then(data => {
        // Replace loading message with actual response
        responseDiv.innerHTML = '<p></p>';
        typeMessage(responseDiv, data.analysis, 3);
      })
      .catch(error => {
        responseDiv.innerHTML = '<p>Sorry, I encountered an error analyzing the reviews. Please try again.</p>';
        console.error('Error:', error);
      });
    }

    // Function to handle user input
    function handleUserInput() {
      const input = document.getElementById('user-input');
      const question = input.value.trim();

      if (question) {
        // Add the user's question to the chat
        const chatMessages = document.getElementById('chat-messages');

        chatMessages.innerHTML += `
          <div class="chat-message bg-primary text-white rounded border p-3 mt-2">
            <p>${question}</p>
          </div>
        `;

        // Clear the input field
        input.value = '';

        // Create a loading message
        const responseDiv = document.createElement('div');
        responseDiv.className = 'chat-message bg-white text-dark rounded border p-3 mt-2';
        responseDiv.innerHTML = '<p>Analyzing reviews...</p>';
        chatMessages.appendChild(responseDiv);

        // Scroll to the bottom of the chat
        chatMessages.scrollTop = chatMessages.scrollHeight;

        // Make API call to your backend
        fetch('/searches/<%= @search.id %>/analyze_with_ai', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
          },
          body: JSON.stringify({ question: question })
        })
        .then(response => response.json())
        .then(data => {
          // Replace loading message with actual response
          responseDiv.innerHTML = '<p></p>';
          typeMessage(responseDiv, data.analysis, 3);
        })
        .catch(error => {
          responseDiv.innerHTML = '<p>Sorry, I encountered an error analyzing the reviews. Please try again.</p>';
          console.error('Error:', error);
        });
      }
    }
  </script>
</div>
